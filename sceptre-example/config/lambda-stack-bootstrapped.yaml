# This is an example of deploying the CDK using the "bootstrapped" deployment_type, which means
# using the resources from the CDK boostrap stack for things such as the asset bucket, asset ECR
# repo, as well as the roles used to push those assets to the cloud. You can use either a Bootstrap
# stack deployed via Sceptre or an existing one deployed to your account via CDK. All you need to
# do to reference a given bootstrap stack in that environment is to use the bootstrap stack's
# qualifier as the "bootstrap_qualifier". If you don't use a bootstrap_qualifier, CDK will default
# to the default qualifier and try to use a bootstrap stack deployed in your account that has that
# qualifier.
#
# Regardless of how the bootstrap stack is deployed, it should be generated by `cdk bootstrap
# --show-template` to ensure maximum compatibility.
#
# IMPORTANT: Even when using the "bootstrapped" deployment_type, Sceptre WILL NOT use the actual
# bootstrapped deployment role to deploy the CloudFormation stack; It will use its own configured
# deployment environment, profile, and/or iam_role.
template:
  type: cdk
  # The path is always within your project's templates/ directory.
  path: lambda_stack.py
  deployment_type: bootstrapped
  # bootstrap_qualifier is optional, but it's better to be explicit about it, even if you do
  # want to use the "default" bootstrap stack in your account. Using !stack_output here ensures that
  # we have a dependency between this stack and the bootstrap stack within Sceptre.
  bootstrap_qualifier: !stack_output cdk-bootstrap.yaml::Qualifier
  # You can also pass CDK context key/value pairs. If you don't specify a context, the default
  # context will be used (as determined by CDK).
  context:
    # You can technically specify the bootstrap qualifier this way too, which might be more familier
    # compared with "normal" CDK configurations. Either here or using bootstrap_qualifier will have
    # the same effect.
    #'@aws-cdk/core:bootstrapQualifier': hnb659fds

    # CDK Feature Flags
    '@aws-cdk/aws-lambda:recognizeLayerVersion': true
    '@aws-cdk/core:checkSecretUsage': true
    '@aws-cdk/core:target-partitions':
      - aws
      - aws-cn
    '@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver': true
    '@aws-cdk/aws-ec2:uniqueImdsv2TemplateName': true
    '@aws-cdk/aws-ecs:arnFormatIncludesClusterName': true
    '@aws-cdk/aws-iam:minimizePolicies': true
    '@aws-cdk/core:validateSnapshotRemovalPolicy': true
    '@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName': true
    '@aws-cdk/aws-s3:createDefaultLoggingPolicy': true
    '@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption': true
    '@aws-cdk/aws-apigateway:disableCloudWatchRole': true
    '@aws-cdk/core:enablePartitionLiterals': true
    '@aws-cdk/aws-events:eventsTargetQueueSameAccount': true
    '@aws-cdk/aws-iam:standardizedServicePrincipals': true
    '@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker': true
  # You can explicitly define your stack name
  class_name: MyLambdaStack

# Parameters are DEPLOY-TIME values passed to the CloudFormation template. Your CDK stack construct
# needs to have CfnParameters in order to support this, though.
parameters:
    SpecialEnv: "This is my Sceptre test"

# sceptre_user_data is passed to your Stack Class's constructor for supplying values at COMPILE-TIME.
sceptre_user_data:
    special_variable: "use this directly at compile_time"
